{"version":3,"sources":["redis/user.js"],"names":[],"mappings":";;;;;;;;;;;AAqBA;;;;;;;8DAMO,iBAA4B,MAA5B,EAAoC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACG,OAAO,SAAP,CAAiB,OAAO,MAAxB,EAAgC,WAAhC,EAA6C,SAA7C,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,Y;;;;;AAItB;;;;;;;;;+DAMO,kBAA4B,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACU,OAAO,SAAP,CAAiB,OAAO,MAAxB,EAAgC,WAAhC,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,Y;;;;;AAItB;;;;;;;;;+DAMO,kBAAyB,MAAzB,EAAiC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACG,OAAO,SAAP,CAAiB,OAAO,MAAxB,EAAgC,QAAhC,EAA0C,MAA1C,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,S;;;;;AAItB;;;;;;;;;+DAMO,kBAAyB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACU,OAAO,SAAP,CAAiB,OAAO,MAAxB,EAAgC,QAAhC,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,S;;;;;AArDtB;;;;AAEA;;;;AAEA;;;;AACA;;;;;;AACA,IAAM,QAAQ,oBAAU,kBAAI,IAAd,CAAd,C,CAVA;;;;AAYA,mBAAS,YAAT,CAAsB,gBAAM,WAAN,CAAkB,SAAxC;;AAEA,IAAM,OAAO,OAAb;AACA,IAAM,SAAS,gBAAM,YAAN,CAAmB,iBAAO,YAA1B,CAAf;;AAEA,OAAO,EAAP,CAAU,OAAV,EAAmB,UAAU,GAAV,EAAe;AAC9B,QAAM,YAAY,GAAlB;AACH,CAFD","file":"redis/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/27.\n */\n\nimport redis from 'redis';\nimport bluebird from 'bluebird';\nimport config from '../config';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nbluebird.promisifyAll(redis.RedisClient.prototype);\n\nconst NAME = \"user:\";\nconst client = redis.createClient(config.redisOptions);\n\nclient.on(\"error\", function (err) {\n    debug(\"Error: \" + err);\n});\n\n/**\n * set timestamp for user\n *\n * @param userid\n * @param timestamp will be valid after the timestamp\n */\nexport async function setTimestamp(userid, timestamp) {\n    await client.hsetAsync(NAME + userid, 'timestamp', timestamp);\n}\n\n/**\n * get timestamp from user\n *\n * @param userid\n * @returns timestamp will be valid after the timestamp\n */\nexport async function getTimestamp(userid) {\n    return await client.hgetAsync(NAME + userid, 'timestamp');\n}\n\n/**\n * set status for user\n *\n * @param userid\n * @param status\n */\nexport async function setStatus(userid, status) {\n    await client.hsetAsync(NAME + userid, 'status', status);\n}\n\n/**\n * get status from user\n *\n * @param userid\n * @returns status\n */\nexport async function getStatus(userid) {\n    return await client.hgetAsync(NAME + userid, 'status');\n}"],"sourceRoot":"/source/"}