{"version":3,"sources":["redis/token.js"],"names":[],"mappings":";;;;;;;;;;;AAwBA;;;;;;gEAKO,iBAAmB,KAAnB,EAA0B,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,2BADH,GACS,OAAO,KAAP,CADT;AAAA;AAAA,+BAEG,OAAO,QAAP,CAAgB,GAAhB,EAAqB,CAArB,CAFH;;AAAA;AAAA,6BAGC,GAHD;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAIO,OAAO,cAAP,CAAsB,GAAtB,EAA2B,GAA3B,CAJP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;AAQtB;;;;;;;;;iEAMO,kBAAmB,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACG,OAAO,QAAP,CAAgB,OAAO,KAAP,CAAhB,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;AAItB;;;;;;;;;;;iEAQO,kBAAuB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACU,OAAO,WAAP,CAAmB,OAAO,KAAP,CAAnB,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,O;;;;;AAnDtB;;;;AAEA;;;;AAEA;;;;AACA;;;;;;AACA,IAAM,QAAQ,oBAAU,kBAAI,IAAd,CAAd,C,CAVA;;;;AAYA,mBAAS,YAAT,CAAsB,gBAAM,WAAN,CAAkB,SAAxC;;AAEA,IAAM,SAAS,gBAAM,YAAN,CAAmB,iBAAO,YAA1B,CAAf;;AAEA,OAAO,EAAP,CAAU,OAAV,EAAmB,UAAU,GAAV,EAAe;AAC9B,UAAM,YAAY,GAAlB;AACH,CAFD;;AAIA,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AACnB,WAAO,WAAW,KAAlB;AACH","file":"redis/token.js","sourcesContent":["/**\n * Created by Bell on 16/8/27.\n */\n\nimport redis from 'redis';\nimport bluebird from 'bluebird';\nimport config from '../config';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nbluebird.promisifyAll(redis.RedisClient.prototype);\n\nconst client = redis.createClient(config.redisOptions);\n\nclient.on(\"error\", function (err) {\n    debug(\"Error: \" + err);\n});\n\nfunction getKey(token) {\n    return \"token:\" + token;\n}\n\n/**\n * add token and iat to redis\n *\n * @param token\n */\nexport async function add(token, exp) {\n    const key = getKey(token);\n    await client.setAsync(key, 1);\n    if (exp) {\n        await client.pexpireatAsync(key, exp);\n    }\n}\n\n/**\n * delete token from redis\n *\n * @param userid\n * @param token\n */\nexport async function del(token) {\n    await client.delAsync(getKey(token));\n}\n\n/**\n * whether token is existed in redis\n * if true,the token is unvalid\n *\n * @param userid\n * @param token\n * @returns {boolean}\n */\nexport async function existed(token) {\n    return await client.existsAsync(getKey(token));\n}\n"],"sourceRoot":"/source/"}