{"version":3,"sources":["models/user.js"],"names":[],"mappings":";;;;;;;;AAIA;;;;AACA;;;;AALA;;;;AAOA,mBAAS,OAAT,GAAmB,OAAO,OAA1B;;AAEA,IAAM,OAAO,IAAI,mBAAS,MAAb,CAAoB;AAC7B,WAAO,EAAC,MAAM,MAAP,EAAe,UAAU,IAAzB,EAA+B,QAAQ,IAAvC,EADsB;AAE7B,cAAU,EAAC,MAAM,MAAP,EAAe,UAAU,IAAzB,EAFmB;AAG7B,UAAM,EAAC,MAAM,MAAP,EAAe,SAAS,CAAxB;AAHuB,CAApB,CAAb;;AAMA,KAAK,GAAL,CAAS,MAAT;AAAA,gEAAiB,iBAAuB,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACP,4BADO,GACA,IADA;;AAAA,4BAGR,KAAK,UAAL,CAAgB,UAAhB,CAHQ;AAAA;AAAA;AAAA;;AAAA,yDAIF,MAJE;;AAAA;AAAA;AAAA;AAAA,+BAOU,yBAAW,KAAK,QAAhB,CAPV;;AAAA;AAOH,4BAPG;;AAQT,6BAAK,QAAL,GAAgB,IAAhB;AARS,yDASF,MATE;;AAAA;AAAA;AAAA;AAAA,yDAWF,iBAXE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA,aAAgC,OAAhC;AAAA;AAAA;;AAAA,WAAgC,OAAhC;AAAA;;AAeA,KAAK,OAAL,CAAa,gBAAb;AAAA,iEAAgC,kBAAgC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB,4BADsB,GACf,IADe;AAAA;AAAA,+BAEf,gCAAkB,QAAlB,EAA4B,KAAK,QAAjC,CAFe;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;;AAAA,aAA+C,gBAA/C;AAAA;AAAA;;AAAA,WAA+C,gBAA/C;AAAA;;AAKA,KAAK,OAAL,CAAa,cAAb;AAAA,iEAA8B,kBAA8B,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB,4BADoB,GACb,IADa;AAAA;AAAA,+BAEM,yBAAW,QAAX,CAFN;;AAAA;AAEpB,yCAFoB;AAAA;AAAA,+BAGb,KAAK,MAAL,CAAY,EAAC,MAAK,EAAC,UAAU,iBAAX,EAAN,EAAZ,CAHa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAAA,aAA6C,cAA7C;AAAA;AAAA;;AAAA,WAA6C,cAA7C;AAAA;;kBAMe,mBAAS,KAAT,CAAe,MAAf,EAAuB,IAAvB,C","file":"models/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport mongoose from 'mongoose';\nimport { hashString,compareHashString } from '../utils/encrypt';\n\nmongoose.Promise = global.Promise;\n\nconst User = new mongoose.Schema({\n    email: {type: String, required: true, unique: true},\n    password: {type: String, required: true},\n    role: {type: Number, default: 0}\n});\n\nUser.pre('save', async function preSave(next) {\n    const user = this;\n\n    if (!user.isModified('password')) {\n        return next();\n    }\n    try {\n        const hash = await hashString(user.password);\n        user.password = hash;\n        return next();\n    } catch (err) {\n        return next(err);\n    }\n});\n\nUser.methods.validatePassword = async function validatePassword(password) {\n    const user = this;\n    return await compareHashString(password, user.password);\n};\n\nUser.methods.updatePassword = async function updatePassword(password) {\n    const user = this;\n    const hashedNewPassword = await hashString(password);\n    return await user.update({$set:{password: hashedNewPassword}});\n};\n\nexport default mongoose.model('user', User);\n"],"sourceRoot":"/source/"}