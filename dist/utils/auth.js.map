{"version":3,"sources":["utils/auth.js"],"names":[],"mappings":"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","file":"utils/auth.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport bcrypt from 'bcrypt';\nimport Promise from 'bluebird';\n\nimport User from '../models/user';\nimport config from '../config';\nimport { verify } from 'jsonwebtoken';\nimport { existed as unvalid_token_existed }  from '../utils/unvalid-token';\n\nconst hashAsync = Promise.promisify(bcrypt.hash);\nconst compareAsync = Promise.promisify(bcrypt.compare);\n\n/**\n * ensure user login successfully\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureUser(ctx, next) {\n    const token = getToken(ctx);\n\n    if (!token) {\n        ctx.throw(401);\n    }\n\n    let payload = null;\n    try {\n        payload = verify(token, config.token);\n    } catch (err) {\n        ctx.throw(401);\n    }\n\n    const user = await User.findById(payload.id, '-password');\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.status != 0) {\n        ctx.throw(403);\n    }\n\n    const existed = await unvalid_token_existed(token);\n    if (existed) {\n        ctx.throw(401);\n    }\n\n    return next();\n}\n\n/**\n * ensure token can set password\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureSetPasswordToken(ctx, next) {\n    const token = getToken(ctx);\n    if (!token) {\n        ctx.throw(401);\n    }\n    let payload = null;\n    try {\n        payload = verify(token, config.token);\n    } catch (err) {\n        ctx.throw(401);\n    }\n    const scope = payload.scope;\n    if (!scope || scope != 'all') {\n        ctx.throw(403);\n    }\n    return next();\n}\n\n/**\n * ensure the user is manager\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureManager(ctx, next) {\n    const token = getToken(ctx);\n    if (!token) {\n        ctx.throw(401);\n    }\n    let payload = null;\n    try {\n        payload = verify(token, config.token);\n    } catch (err) {\n        ctx.throw(401);\n    }\n    const user = await User.findById(payload.id, '-password');\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        ctx.throw(403);\n    }\n    return next();\n}\n\n/**\n * get token from ctx.request header\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @returns {*}\n */\nexport function getToken(ctx) {\n    const header = ctx.request.header.authorization;\n    if (!header) {\n        return null;\n    }\n    const parts = header.split(' ');\n    if (parts.length !== 2) {\n        return null;\n    }\n    const scheme = parts[0];\n    const token = parts[1];\n    if (/^Bearer$/i.test(scheme)) {\n        return token;\n    }\n    return null;\n}\n\n/**\n * get payload from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport function getPayload(ctx) {\n    const token = getToken(ctx);\n    if (token) {\n        return verify(token, config.token);\n    }\n    return null;\n}\n\n/**\n * get id from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport function getID(ctx) {\n    const payload = getPayload(ctx);\n    if (payload) {\n        return payload.id;\n    }\n    return null;\n}\n\n/**\n * get User from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport async function getUser(ctx) {\n    const id = getID(ctx);\n    if (id) {\n        return await User.findById(id, '-password');\n    }\n    return null;\n}\n\n/**\n * get hashed string\n *\n * @param string\n * @returns hashed string\n */\nexport async function hashString(string) {\n    return await hashAsync(string, 10);\n}\n\n/**\n * compare string with hashed string\n *\n * @param string\n * @param hashedString\n * @returns {*}\n */\nexport async function compareHashString(string, hashedString) {\n    return await compareAsync(string, hashedString);\n}\n"],"sourceRoot":"/source/"}