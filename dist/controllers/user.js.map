{"version":3,"sources":["controllers/user.js"],"names":[],"mappings":"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","file":"controllers/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport passport from 'koa-passport';\nimport url from 'url';\nimport User from '../models/user';\nimport SetPwdToken from '../models/setPwdToken';\nimport * as token_redis from '../redis/token';\nimport * as user_redis from '../redis/user';\nimport * as encrypt from '../utils/encrypt';\nimport * as regex from '../utils/regex';\nimport * as token_util from '../utils/token';\nimport * as mail from '../utils/mail';\nimport * as response_util from '../utils/response';\nimport * as auth from '../tools/auth';\nimport * as check from '../tools/check';\nimport config from '../config';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\n/**\n * list users\n *\n * @example curl -H \"Accept: application/vnd.greedlab+json\" -H \"Authorization: Bearer <token>\" -X GET localhost:4002/users\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function list(ctx, next) {\n    try {\n        let users = await User.find({}, {password: 0, __v: 0});\n        users = users || [];\n        ctx.body = {\n            users\n        };\n    } catch (err) {\n        if (err === 404 || err.name === 'CastError') {\n            ctx.throw(404);\n        }\n        ctx.throw(500);\n    }\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * register\n *\n * @example curl -H \"Accept: application/vnd.greedlab+json\" -H \"Content-Type: application/json\" -X POST -d '{\"email\": \"test@greedlab.com\",\"password\":\"secretpasas\"}' localhost:4002/register\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function register(ctx, next) {\n    const email = ctx.request.body.email;\n    if (!check.checkUserEmpty(ctx, 'email', email)) {\n        return;\n    }\n    if (!check.checkValidEmail(ctx, email)) {\n        return;\n    }\n\n    const password = ctx.request.body.password;\n    if (!check.checkUserEmpty(ctx, 'password', password)) {\n        return;\n    }\n    if (!check.checkValidPassword(ctx, password)) {\n        return;\n    }\n\n    const user = new User({email, password});\n    try {\n        const first = await User.findOne();\n        if (!first || first.length > 0) { // no user\n            user.role = 1;\n        }\n\n        const existed = await User.findOne({email});\n        if (existed) {\n            response_util.resourceAlreadyExists(ctx, 'User', 'email');\n            return;\n        } else {\n            await user.save();\n        }\n    } catch (err) {\n        debug(err);\n        ctx.throw(500);\n    }\n\n    // generate new token\n    const payload = token_util.generatePayload(user.id);\n    const token = token_util.generateTokenFromPayload(payload);\n    try {\n        await token_redis.add(token, payload.exp);\n    } catch (err) {\n        debug(err);\n        ctx.throw(500);\n    }\n\n    // response\n    const response = user.toJSON();\n    delete response.password;\n    ctx.body = {\n        token,\n        user: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * login\n *\n * @example curl -H \"Content-Type: application/json\" -X POST -d '{ \"email\": \"test@greedlab.com\", \"password\": \"secretpasas\" }' localhost:4002/login\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function login(ctx, next) {\n    const email = ctx.request.body.email;\n    if (!check.checkUserEmpty(ctx, 'email', email)) {\n        return;\n    }\n\n    const password = ctx.request.body.password;\n    if (!check.checkUserEmpty(ctx, 'password', password)) {\n        return;\n    }\n\n    let options = {\n        session: false\n    };\n    return passport.authenticate('local', options, async(user) => {\n        if (!user) {\n            response_util.authenticationFailed(ctx);\n            return;\n        }\n\n        // generate new token\n        const payload = token_util.generatePayload(user.id);\n        const token = token_util.generateTokenFromPayload(payload);\n        try {\n            await token_redis.add(token, payload.exp);\n        } catch (err) {\n            ctx.throw(500, err.message);\n        }\n\n        const response = user.toJSON();\n        delete response.password;\n        ctx.body = {\n            token,\n            user: response\n        };\n    })(ctx, next);\n}\n\n/**\n * logout\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST localhost:4002/logout\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function logout(ctx, next) {\n    const token = auth.getToken(ctx);\n    if (!token) {\n        ctx.throw(422, 'unvalid token');\n    }\n\n    const payload = token_util.getPayload(token);\n    if (!payload || !payload.id) {\n        ctx.throw(422, 'unvalid token');\n    }\n\n    try {\n        await token_redis.del(token);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    ctx.status = 204;\n}\n\n/**\n * modify my password\n *\n * @example curl -H \"Authorization: Bearer <token>\" -H \"Content-Type: application/json\" -X POST -d '{\"password\": \"secretpasas\", \"new_password\": \"new_password\"}' localhost:4002/modify-my-password\n * @param ctx\n * @param next\n */\nexport async function modifyMyPassword(ctx, next) {\n    const user = await auth.getFullUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    const password = ctx.request.body.password;\n    if (!check.checkUserEmpty(ctx, 'password', password)) {\n        return;\n    }\n\n    const new_password = ctx.request.body.new_password;\n    if (!check.checkUserEmpty(ctx, 'new_password', new_password)) {\n        return;\n    }\n\n    // verify password\n    const equal = await user.validatePassword(password);\n    if (!equal) {\n        response_util.fieldInvalid(ctx, 'User', 'password', 'Wrong password');\n        return;\n    }\n\n    if (new_password === password) {\n        response_util.fieldInvalid(ctx, 'User', 'new_password', 'Same to the original');\n        return;\n    }\n\n    // udpate password and token valid timestamp\n    try {\n        await user.updatePassword(new_password);\n        await user_redis.setTimestamp(user.id, Date.now());\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // generate new token\n    const payload = token_util.generatePayload(user.id);\n    const token = token_util.generateTokenFromPayload(payload);\n    try {\n        await token_redis.add(token, payload.exp);\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // delete old token\n    try {\n        const old_token = auth.getToken(ctx);\n        await token_redis.del(old_token);\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    const response = user.toJSON();\n    delete response.password;\n    ctx.body = {\n        token,\n        user: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * get my profile\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X GET localhost:4002/users/me/profile\n * @param ctx\n * @param next\n */\nexport async function myProfile(ctx, next) {\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    const response = user.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * send mail for reset password\n *\n * @example curl -X POST -d '{\"email\": \"greedpatch@greedlab.com\"}' localhost:4002/reset-password\n * @param ctx\n * @param next\n */\nexport async function resetPassword(ctx, next) {\n    debug(ctx.request.body);\n    const email = ctx.request.body.email;\n    if (!check.checkUserEmpty(ctx, 'email', email)) {\n        return;\n    }\n    if (!check.checkValidEmail(ctx, email)) {\n        return;\n    }\n\n    // get user\n    let user = null;\n    try {\n        user = await User.findOne({email});\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!user) {\n        response_util.emailNotExist(ctx);\n    }\n\n    // save setPwdToken\n    const token = new SetPwdToken({userid: user.id});\n    try {\n        await token.save();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // send mail\n    let text = 'set your password from: ';\n    text += url.resolve(config.front_address, '/set-password/' + token.id);\n    const content = {\n        from: config.mail_from, // sender address\n        to: email, // list of receivers\n        subject: 'Reset your password of greedpatch', // Subject line\n        text: text // plaintext body\n    };\n    debug(content);\n    await mail.send(content);\n\n    ctx.body = {\n        message: 'Please set password from email'\n    };\n}\n\n/**\n * set password\n *\n * @example curl -X POST -d '{token: \"token\", password: \"password\"}' localhost:4002/set-password\n * @param ctx\n * @param next\n */\nexport async function setPassword(ctx, next) {\n    const token_id = ctx.request.body.token;\n\n    if (!check.checkSetPwdTokenEmpty(ctx, 'token_id', token_id)) {\n        return;\n    }\n\n    const password = ctx.request.body.password;\n    if (!check.checkUserEmpty(ctx, 'password', password)) {\n        return;\n    }\n    if (!check.checkValidPassword(ctx, password)) {\n        return;\n    }\n\n    // valid setPwdToken\n    let setPwdToken = null;\n    try {\n        setPwdToken = await SetPwdToken.findOne({_id: token_id, status: 0});\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!setPwdToken) {\n        response_util.setPwdTokenNotExist(ctx);\n        return;\n    }\n\n    // get user\n    let user = null;\n    try {\n        user = await User.findById(setPwdToken.userid);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!user) {\n        response_util.userNotExist(ctx);\n        return;\n    }\n\n    // udpate password and token valid timestamp\n    if (user.password != password) {\n        try {\n            await user.updatePassword(password);\n            await user_redis.setTimestamp(user.id, Date.now());\n        } catch (err) {\n            ctx.throw(500);\n        }\n    }\n\n    // set setPwdToken invalid\n    try {\n        await setPwdToken.upate({status: 1});\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // generate new token\n    const payload = token_util.generatePayload(user.id);\n    const token = token_util.generateTokenFromPayload(payload);\n    try {\n        await token_redis.add(token, payload.exp);\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    const response = user.toJSON();\n    delete response.password;\n    ctx.body = {\n        token,\n        user: response\n    };\n}\n\n/**\n * update user's password\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d '{password: \"password\"}' localhost:4002/users/:id/password\n * @param ctx\n * @param next\n */\nexport async function updatePassword(ctx, next) {\n    const userid = ctx.params.id;\n    if (!userid) {\n        ctx.throw(400, 'id is empty');\n    }\n\n    const password = ctx.request.body.password;\n    if (!password) {\n        ctx.throw(400, 'password is empty');\n    }\n    if (!regex.validPassword(password)) {\n        ctx.throw(400, 'unvalid password');\n    }\n\n    // get user\n    let user = null;\n    try {\n        user = await User.findById(userid, {password: 0, __v: 0});\n    } catch (err) {\n        ctx.throw(422, 'unvalid id');\n    }\n    if (!user) {\n        ctx.throw(422, 'user is not existed');\n    }\n\n    if (user.password === password) {\n        ctx.throw(422, 'please don not use the same password');\n    }\n\n    // udpate password and token valid timestamp\n    try {\n        await user.updatePassword(password);\n        await user_redis.setTimestamp(user.id, Date.now());\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * update user status\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d '{password: \"password\"}' localhost:4002/users/:id/status\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function updateStatus(ctx, next) {\n    debug(ctx.request.body);\n    const userid = ctx.params.id;\n    if (!userid) {\n        ctx.throw(400, 'id is empty');\n    }\n\n    const status = ctx.request.body.status;\n    if (!status) {\n        ctx.throw(400, 'status is empty');\n    }\n    if (status < 0 || status > 1) {\n        ctx.throw(400, 'unvalid status');\n    }\n\n    // get user\n    let user = null;\n    try {\n        user = await User.findById(userid, {password: 0, __v: 0});\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!user) {\n        ctx.throw(422, 'user is not existed');\n    }\n\n    // update user's status\n    try {\n        await user.update({$set: {status: status}});\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\n"],"sourceRoot":"/source/"}