{"version":3,"sources":["controllers/user.js"],"names":[],"mappings":"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","file":"controllers/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport passport from 'koa-passport';\nimport url from 'url';\nimport * as encrypt from '../utils/encrypt';\nimport * as regex from '../utils/regex';\nimport * as token_util from '../utils/token';\nimport * as mail from '../utils/mail';\nimport User from '../models/user';\nimport SetPwdToken from '../models/setPwdToken';\nimport * as token_redis from '../redis/token';\nimport * as user_redis from '../redis/user';\nimport * as auth from '../tools/auth';\nimport config from '../config';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\n/**\n * list users\n *\n * @example curl -H \"Accept: application/vnd.greedlab+json\" -H \"Authorization: Bearer <token>\" -X GET localhost:4002/users\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function list(ctx, next) {\n    try {\n        let users = await User.find({}, {password: 0, __v: 0});\n        users = users || [];\n        ctx.body = {\n            users\n        };\n    } catch (err) {\n        if (err === 404 || err.name === 'CastError') {\n            ctx.throw(404);\n        }\n        ctx.throw(500);\n    }\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * register\n *\n * @example curl -H \"Accept: application/vnd.greedlab+json\" -H \"Content-Type: application/json\" -X POST -d '{\"email\": \"test@greedlab.com\",\"password\":\"secretpasas\"}' localhost:4002/register\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function register(ctx, next) {\n    debug(ctx.request.body);\n    if (!regex.validEmail(ctx.request.body.email)) {\n        ctx.throw(400, 'invalid email');\n    }\n    if (!regex.validPassword(ctx.request.body.password)) {\n        ctx.throw(400, 'invalid password');\n    }\n\n    const user = new User(ctx.request.body);\n    try {\n        await user.save();\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // generate new token\n    const payload = token_util.generatePayload(user.id);\n    const token = token_util.generateTokenFromPayload(payload);\n    try {\n        await token_redis.add(token, payload.exp);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // response\n    const response = user.toJSON();\n    delete response.password;\n    ctx.body = {\n        token,\n        user: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * login\n *\n * @example curl -H \"Content-Type: application/json\" -X POST -d '{ \"email\": \"test@greedlab.com\", \"password\": \"secretpasas\" }' localhost:4002/login\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function login(ctx, next) {\n    let options = {\n        session: false\n    };\n    return passport.authenticate('local', options, async(user) => {\n        if (!user) {\n            ctx.throw('unvalid email or password', 401);\n        }\n\n        // generate new token\n        const payload = token_util.generatePayload(user.id);\n        const token = token_util.generateTokenFromPayload(payload);\n        try {\n            await token_redis.add(token, payload.exp);\n        } catch (err) {\n            ctx.throw(500, err.message);\n        }\n\n        const response = user.toJSON();\n        delete response.password;\n        ctx.body = {\n            token,\n            user: response\n        };\n    })(ctx, next);\n}\n\n/**\n * logout\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST localhost:4002/logout\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function logout(ctx, next) {\n    const token = auth.getToken(ctx);\n    if (!token) {\n        ctx.throw(422, 'unvalid token');\n    }\n\n    const payload = token_util.getPayload(token);\n    if (!payload || !payload.id) {\n        ctx.throw(422, 'unvalid token');\n    }\n\n    try {\n        await token_redis.del(token);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    ctx.status = 204;\n}\n\n/**\n * modify my password\n *\n * @example curl -H \"Authorization: Bearer <token>\" -H \"Content-Type: application/json\" -X POST -d '{\"password\": \"secretpasas\", \"new_password\": \"new_password\"}' localhost:4002/modify-my-password\n * @param ctx\n * @param next\n */\nexport async function modifyMyPassword(ctx, next) {\n    debug(ctx.request.body);\n    const user = await auth.getFullUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    const password = ctx.request.body.password;\n    const new_password = ctx.request.body.new_password;\n    if (!password || !new_password) {\n        ctx.throw(400);\n    }\n\n    if (new_password === password) {\n        ctx.throw(422, 'please don not set the same password');\n    }\n\n    // verify password\n    const equal = await user.validatePassword(password);\n    if (!equal) {\n        ctx.throw(401);\n    }\n\n    // update password\n    try {\n        const hashedNewPassword = await encrypt.hashString(new_password);\n        await user.update({$set :{password: hashedNewPassword}});\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // generate new token\n    const payload = token_util.generatePayload(user.id);\n    const token = token_util.generateTokenFromPayload(payload);\n    try {\n        await token_redis.add(token, payload.exp);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // delete old token\n    try {\n        const old_token = auth.getToken(ctx);\n        await token_redis.del(old_token);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    const response = user.toJSON();\n    delete response.password;\n    ctx.body = {\n        token,\n        user: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * get my profile\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X GET localhost:4002/users/me/profile\n * @param ctx\n * @param next\n */\nexport async function myProfile(ctx, next) {\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    const response = user.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * send mail for reset password\n *\n * @example curl -X POST -d '{\"email\": \"greedpatch@greedlab.com\"}' localhost:4002/reset-password\n * @param ctx\n * @param next\n */\nexport async function resetPassword(ctx, next) {\n    debug(ctx.request.body);\n    const email = ctx.request.body.email;\n    if (!email) {\n        ctx.throw(400);\n    }\n\n    // get user\n    let user = null;\n    try {\n        user = await User.findOne({email});\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!user) {\n        ctx.throw(422, 'user is not existed');\n    }\n\n    // save setPwdToken\n    const token = new SetPwdToken({userid: user.id});\n    try {\n        await token.save();\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // send mail\n    let text = 'set your password from: \\n';\n    text += url.resolve(config.frontAddress, '/set-password/' + token.id);\n    var content = {\n        from: config.mailFrom, // sender address\n        to: email, // list of receivers\n        subject: 'Reset your greedpatch password', // Subject line\n        text: text // plaintext body\n    };\n    mail.send(content);\n\n    ctx.body = {\n        message: 'Please set password from email'\n    };\n}\n\n/**\n * set my password\n *\n * @example curl -X POST -d '{token: \"token\", password: \"password\"}' localhost:4002/set-my-password\n * @param ctx\n * @param next\n */\nexport async function setMyPassword(ctx, next) {\n    debug(ctx.request.body);\n    const token_id = ctx.request.body.token;\n    if (!token_id) {\n        ctx.throw(400, 'token is empty');\n    }\n\n    const password = ctx.request.body.password;\n    if (!password) {\n        ctx.throw(400, 'password is empty');\n    }\n\n    // valid setPwdToken\n    let setPwdToken = null;\n    try {\n        setPwdToken = await SetPwdToken.findOne({_id: token_id, status: 0});\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!setPwdToken) {\n        ctx.throw(422, 'unvalid token');\n    }\n\n    // get user\n    let user = null;\n    try {\n        user = await User.findById(setPwdToken.userid);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!user) {\n        ctx.throw(422, 'unvalid token');\n    }\n\n    try {\n        // whether set the same password\n        const same = await user.validatePassword(password);\n        if (!same) {\n            await user_redis.setTimestamp(user.id, Date.now());\n        }\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // generate new token\n    const payload = token_util.generatePayload(user.id);\n    const token = token_util.generateTokenFromPayload(payload);\n    try {\n        await token_redis.add(token, payload.exp);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    ctx.body = {\n        message: 'please set password through your email'\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * update user's password\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d '{password: \"password\"}' localhost:4002/users/:id/password\n * @param ctx\n * @param next\n */\nexport async function updatePassword(ctx, next) {\n    debug(ctx.request.body);\n    const userid = ctx.params.id;\n    if (!userid) {\n        ctx.throw(400, 'id is empty');\n    }\n\n    const password = ctx.request.body.password;\n    if (!password) {\n        ctx.throw(400, 'password is empty');\n    }\n    if (!regex.validPassword(password)) {\n        ctx.throw(400, 'unvalid password');\n    }\n\n    // get user\n    let user = null;\n    try {\n        user = await User.findById(userid, {password: 0, __v: 0});\n    } catch (err) {\n        ctx.throw(422, 'unvalid id');\n    }\n    if (!user) {\n        ctx.throw(422, 'user is not existed');\n    }\n\n    try {\n        // whether set the same password\n        const same = await user.validatePassword(password);\n        if (!same) {\n            // update user's password and validTokenTimestamp\n            await user.update({$set: {password, validTokenTimestamp: Date.now()}});\n        }\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * update user status\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d '{password: \"password\"}' localhost:4002/users/:id/status\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function updateStatus(ctx, next) {\n    debug(ctx.request.body);\n    const userid = ctx.params.id;\n    if (!userid) {\n        ctx.throw(400, 'id is empty');\n    }\n\n    const status = ctx.request.body.status;\n    if (!status) {\n        ctx.throw(400, 'status is empty');\n    }\n    if (status < 0 || status > 1) {\n        ctx.throw(400, 'unvalid status');\n    }\n\n    // get user\n    let user = null;\n    try {\n        user = await User.findById(userid, {password: 0, __v: 0});\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!user) {\n        ctx.throw(422, 'user is not existed');\n    }\n\n    // update user's status\n    try {\n        await user.update({$set: {status: status}});\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\n"],"sourceRoot":"/source/"}