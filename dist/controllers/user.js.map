{"version":3,"sources":["controllers/user.js"],"names":[],"mappings":"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","file":"controllers/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport passport from 'koa-passport';\nimport * as encrypt from '../utils/encrypt';\nimport * as regex from '../utils/regex';\nimport * as token_util from '../utils/token';\nimport User from '../models/user';\nimport Token from '../models/token';\nimport { addToken as addUnvalidToken } from '../tools/unvalid-token';\nimport * as auth from '../tools/auth';\nimport * as token_tool from '../tools/token';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\n/**\n * list users\n *\n * @example curl -H \"Accept: application/vnd.greedlab+json\" -H \"Authorization: Bearer <token>\" -X GET localhost:4002/users\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function list(ctx, next) {\n    try {\n        let users = await User.find({},{password: 0, __v: 0});\n        users = users || [];\n        ctx.body = {\n            users\n        };\n    } catch (err) {\n        if (err === 404 || err.name === 'CastError') {\n            ctx.throw(404);\n        }\n        ctx.throw(500);\n    }\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * register\n *\n * @example curl -H \"Accept: application/vnd.greedlab+json\" -H \"Content-Type: application/json\" -X POST -d '{\"email\": \"test@greedlab.com\",\"password\":\"secretpasas\"}' localhost:4002/register\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function register(ctx, next) {\n    debug(ctx.request.body);\n    if (!regex.validEmail(ctx.request.body.email)) {\n        ctx.throw(400, 'invalid email');\n    }\n    if (!regex.validPassword(ctx.request.body.password)) {\n        ctx.throw(400, 'invalid password');\n    }\n    const user = new User(ctx.request.body);\n    try {\n        await user.save();\n    } catch (err) {\n        debug(err);\n        ctx.throw(422, 'email is existed');\n    }\n    const token = token_util.generateToken(user.id);\n    await token_tool.saveToken(token);\n\n    // response\n    const response = user.toJSON();\n    delete response.password;\n    ctx.body = {\n        token,\n        user: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * login\n *\n * @example curl -H \"Content-Type: application/json\" -X POST -d '{ \"email\": \"test@greedlab.com\", \"password\": \"secretpasas\" }' localhost:4002/login\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function login(ctx, next) {\n    let options = {\n        session: false\n    };\n    return passport.authenticate('local', options, async (user) => {\n        if (!user) {\n            ctx.throw('unvalid email or password', 401);\n        }\n        const token = token_util.generateToken(user.id);\n        await token_tool.saveToken(token);\n\n        const response = user.toJSON();\n        delete response.password;\n        ctx.body = {\n            token,\n            user: response\n        };\n    })(ctx, next);\n}\n\n/**\n * logout\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST localhost:4002/logout\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function logout(ctx, next) {\n    try {\n        const token = auth.getToken(ctx);\n        if (token) {\n            addUnvalidToken(token);\n        }\n    } catch (err) {\n        ctx.throw(422, err.message);\n    }\n    ctx.status = 204;\n}\n\n/**\n * modify my password\n *\n * @example curl -H \"Authorization: Bearer <token>\" -H \"Content-Type: application/json\" -X POST -d '{\"password\": \"secretpasas\", \"new_password\": \"new_password\"}' localhost:4002/modify-my-password\n * @param ctx\n * @param next\n */\nexport async function modifyMyPassword(ctx, next) {\n    debug(ctx.request.body);\n    const user = await auth.getFullUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    const password = ctx.request.body.password;\n    const new_password = ctx.request.body.new_password;\n    if (!password || !new_password) {\n        ctx.throw(400);\n    }\n    const equal = await encrypt.compareHashString(password, user.password);\n    if (!equal) {\n        ctx.throw(401);\n    }\n    const hashedNewPassword = await encrypt.hashString(new_password);\n    try {\n        await user.update({password: hashedNewPassword});\n    } catch (err) {\n        ctx.throw(422, 'unvalid new_password');\n    }\n    // set origin token unvalid\n    addUnvalidToken(auth.getToken(ctx));\n\n    const token = token_util.generateToken(user.id);\n    await token_tool.saveToken(token);\n\n    const response = user.toJSON();\n    ctx.body = {\n        token,\n        user: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * get my profile\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X GET localhost:4002/users/me/profile\n * @param ctx\n * @param next\n */\nexport async function myProfile(ctx, next) {\n    debug(ctx.request.body);\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    const response = user.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * send mail for reset password\n *\n * @example curl -X POST -d '{\"email\": \"greedpatch@greedlab.com\"}' localhost:4002/reset-password\n * @param ctx\n * @param next\n */\nexport async function resetPassword(ctx, next) {\n    debug(ctx.request.body);\n    const email = ctx.request.body.email;\n    if (!email) {\n        ctx.throw(400);\n    }\n\n    let user = null;\n    try {\n        user = await User.findOne({email});\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!user) {\n        ctx.throw(422,'user is not existed');\n    }\n\n    const token = token_util.generateSetPasswordToken(user.id);\n\n    // save token\n    const token_object = new Token({token, type: 2});\n    try {\n        await token_object.save();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // TODO send mail\n    ctx.body = {\n        message: 'set password from email'\n    };\n    // const response = user.toJSON();\n    // ctx.body = {\n    //     token,\n    //     user: response\n    // };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * set my password\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d '{password: \"password\"}' localhost:4002/set-my-password\n * @param ctx\n * @param next\n */\nexport async function setMyPassword(ctx, next) {\n    debug(ctx.request.body);\n    const email = ctx.request.body.email;\n    if (!email) {\n        ctx.throw(400, 'email is empty');\n    }\n    if (!regex.validEmail(email)) {\n        ctx.throw(400, 'unvalid email');\n    }\n    let user = null;\n    try {\n        user = await User.find({email: email},{password: 0, __v: 0});\n    } catch (err) {\n        ctx.throw(422, 'unvalid email');\n    }\n    if (!user) {\n        ctx.throw(422, 'user is not existed');\n    }\n    // TODO send <front >/set-password?token=<token> to email\n    const token = token_util.generateToken(user.id);\n    await token_tool.saveToken(token);\n\n    ctx.body = {\n        message : 'please set password through your email'\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * update user's password\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d '{password: \"password\"}' localhost:4002/users/:id/password\n * @param ctx\n * @param next\n */\nexport async function updatePassword(ctx, next) {\n    debug(ctx.request.body);\n    const userid = ctx.params.id;\n    const password = ctx.request.body.password;\n    if (!userid) {\n        ctx.throw(400, 'id is empty');\n    }\n    if (!password) {\n        ctx.throw(400, 'password is empty');\n    }\n    if (!regex.validPassword(password)) {\n        ctx.throw(400, 'unvalid password');\n    }\n    let user = null;\n    try {\n        user = await User.findById(userid, {password: 0, __v: 0});\n    } catch (err) {\n        ctx.throw(422, 'unvalid id');\n    }\n    if (!user) {\n        ctx.throw(422, 'user is not existed');\n    }\n\n    const docs = await Token.find({userid, status: 0});\n    for (let doc of docs) {\n        if (doc.token) {\n            await addUnvalidToken(doc.token);\n            await doc.update({status: 1});\n        }\n    }\n    const token = token_util.generateToken(user.id);\n    await token_tool.saveToken(token);\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * update user status\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d '{password: \"password\"}' localhost:4002/users/:id/status\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function updateStatus(ctx, next) {\n    debug(ctx.request.body);\n    const userid = ctx.params.id;\n    const status = ctx.request.body.status;\n    if (!userid) {\n        ctx.throw(400, 'id is empty');\n    }\n    if (!status) {\n        ctx.throw(400, 'status is empty');\n    }\n    if (status < 0 || status > 1) {\n        ctx.throw(400, 'unvalid status');\n    }\n    let user = null;\n    try {\n        user = await User.findById(userid, {password: 0, __v: 0});\n    } catch (err) {\n        ctx.throw(422, 'unvalid id');\n    }\n    if (!user) {\n        ctx.throw(422, 'user is not existed');\n    }\n    try {\n        await user.update({status: status});\n    } catch (err) {\n        ctx.throw(422, 'unvalid status');\n    }\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n"],"sourceRoot":"/source/"}