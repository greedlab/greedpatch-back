{"version":3,"sources":["controllers/patch.js"],"names":[],"mappings":";;;;;;;;;;gEAWO,iBAAsB,GAAtB,EAA2B,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,gCADH,GACc,IAAI,MAAJ,CAAW,EADzB;;AAEH,4BAAI,CAAC,QAAL,EAAe;AACX,gCAAI,KAAJ,CAAU,GAAV,EAAe,qBAAf;AACH;;AAEG,6BAND,GAMS,IANT;AAAA;AAAA;AAAA,+BAQe,gBAAM,QAAN,CAAe,QAAf,CARf;;AAAA;AAQC,6BARD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUC,4BAAI,KAAJ,CAAU,GAAV;;AAVD;AAYH,4BAAI,CAAC,KAAL,EAAY;AACR,gCAAI,KAAJ,CAAU,GAAV,EAAe,sBAAf;AACH;;AAEG,+BAhBD,GAgBW,IAhBX;AAAA;AAAA;AAAA,+BAkBiB,kBAAQ,QAAR,CAAiB,MAAM,UAAvB,CAlBjB;;AAAA;AAkBC,+BAlBD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAoBC,4BAAI,KAAJ,CAAU,GAAV;;AApBD;AAsBH,4BAAI,CAAC,OAAL,EAAc;AACV,gCAAI,KAAJ,CAAU,GAAV,EAAe,wBAAf;AACH;;AAxBE;AAAA,+BA0Bc,KAAK,OAAL,CAAa,GAAb,CA1Bd;;AAAA;AA0BC,4BA1BD;;AA2BH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV;AACH;AACD,4BAAI,KAAK,IAAL,IAAa,CAAjB,EAAoB;AAChB,gCAAI,CAAC,QAAQ,QAAR,CAAiB,KAAK,EAAtB,CAAL,EAAgC;AAC5B,oCAAI,KAAJ,CAAU,GAAV,EAAe,eAAf;AACH;AACJ;;AAEK,gCApCH,GAoCc,MAAM,MAAN,EApCd;;AAqCH,4BAAI,IAAJ,GAAW,QAAX;;AArCG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,M;;;;;;iEAwCf,kBAAmB,GAAnB,EAAwB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,gCADH,GACc,IAAI,MAAJ,CAAW,EADzB;;AAEH,4BAAI,CAAC,QAAL,EAAe;AACX,gCAAI,KAAJ,CAAU,GAAV,EAAe,qBAAf;AACH;;AAEG,6BAND,GAMS,IANT;AAAA;AAAA;AAAA,+BAQe,gBAAM,QAAN,CAAe,QAAf,CARf;;AAAA;AAQC,6BARD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUC,4BAAI,KAAJ,CAAU,GAAV;;AAVD;AAYH,4BAAI,CAAC,KAAL,EAAY;AACR,gCAAI,KAAJ,CAAU,GAAV,EAAe,sBAAf;AACH;;AAEG,+BAhBD,GAgBW,IAhBX;AAAA;AAAA;AAAA,+BAkBiB,kBAAQ,QAAR,CAAiB,MAAM,UAAvB,CAlBjB;;AAAA;AAkBC,+BAlBD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAoBC,4BAAI,KAAJ,CAAU,GAAV;;AApBD;AAsBH,4BAAI,CAAC,OAAL,EAAc;AACV,gCAAI,KAAJ,CAAU,GAAV,EAAe,wBAAf;AACH;;AAxBE;AAAA,+BA0Bc,KAAK,OAAL,CAAa,GAAb,CA1Bd;;AAAA;AA0BC,4BA1BD;;AA2BH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV;AACH;AACD,4BAAI,KAAK,IAAL,IAAa,CAAjB,EAAoB;AAChB,gCAAI,CAAC,QAAQ,SAAR,CAAkB,KAAK,EAAvB,CAAL,EAAiC;AAC7B,oCAAI,KAAJ,CAAU,GAAV,EAAe,eAAf;AACH;AACJ;;AAlCE;AAAA;AAAA,+BAqCO,MAAM,MAAN,EArCP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAuCC,4BAAI,KAAJ,CAAU,GAAV;;AAvCD;;AA0CH,4BAAI,MAAJ,GAAa,GAAb;;AA1CG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;;iEA6Cf,kBAAqB,GAArB,EAA0B,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,8BAAM,IAAI,OAAJ,CAAY,IAAlB;;AAEM,kCAHH,GAGgB,IAAI,OAAJ,CAAY,IAAZ,CAAiB,UAHjC;;AAIH,4BAAI,CAAC,UAAL,EAAiB;AACb,gCAAI,KAAJ,CAAU,GAAV,EAAe,6BAAf;AACH;;AAEK,uCARH,GAQqB,IAAI,OAAJ,CAAY,IAAZ,CAAiB,eARtC;;AASH,4BAAI,CAAC,eAAL,EAAsB;AAClB,gCAAI,KAAJ,CAAU,GAAV,EAAe,kCAAf;AACH;;AAEK,qCAbH,GAamB,IAAI,OAAJ,CAAY,IAAZ,CAAiB,aAAjB,GAAiC,CAbpD;AAeC,+BAfD,GAeW,IAfX;AAAA;AAAA;AAAA,+BAiBiB,kBAAQ,QAAR,CAAiB,UAAjB,CAjBjB;;AAAA;AAiBC,+BAjBD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmBC,4BAAI,KAAJ,CAAU,GAAV;;AAnBD;AAqBH,4BAAI,CAAC,OAAL,EAAc;AACV,gCAAI,KAAJ,CAAU,GAAV,EAAe,wBAAf;AACH;;AAEG,+BAzBD,GAyBW,IAzBX;AAAA;AAAA;AAAA,+BA2BiB,gBAAM,IAAN,CAAW;AACvB,wCAAY,QAAQ,EADG;AAEvB,4DAFuB;AAGvB,2CAAe,EAAC,KAAK,aAAN;AAHQ,yBAAX,EAIb,IAJa,CAIR;AACJ,2CAAe,CAAC;AADZ,yBAJQ,EAMb,KANa,CAMP,CANO,CA3BjB;;AAAA;AA2BC,+BA3BD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmCC,4BAAI,KAAJ,CAAU,GAAV;;AAnCD;AAqCH,4BAAI,WAAW,QAAQ,MAAR,GAAiB,CAAhC,EAAmC;AACzB,oCADyB,GACd,QAAQ,CAAR,EAAW,MAAX,EADc;;AAE/B,gCAAI,IAAJ,GAAW,QAAX;AACH,yBAHD,MAGO;AACH,gCAAI,MAAJ,GAAa,GAAb;AACH;;AA1CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,K;;;;;;iEA6Cf,kBAAoB,GAApB,EAAyB,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,kCADH,GACgB,IAAI,MAAJ,CAAW,OAD3B;;AAEH,4BAAI,CAAC,UAAL,EAAiB;AACb,gCAAI,KAAJ,CAAU,GAAV,EAAe,0BAAf;AACH;;AAEG,+BAND,GAMW,IANX;AAAA;AAAA;AAAA,+BAQiB,kBAAQ,QAAR,CAAiB,UAAjB,CARjB;;AAAA;AAQC,+BARD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUC,4BAAI,KAAJ,CAAU,GAAV;;AAVD;AAYH,4BAAI,CAAC,OAAL,EAAc;AACV,gCAAI,KAAJ,CAAU,GAAV,EAAe,wBAAf;AACH;;AAdE;AAAA,+BAgBc,KAAK,OAAL,CAAa,GAAb,CAhBd;;AAAA;AAgBC,4BAhBD;;AAiBH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV;AACH;AACD,4BAAI,KAAK,IAAL,IAAa,CAAjB,EAAoB;AAChB,gCAAI,CAAC,QAAQ,QAAR,CAAiB,KAAK,EAAtB,CAAL,EAAgC;AAC5B,oCAAI,KAAJ,CAAU,GAAV,EAAe,eAAf;AACH;AACJ;;AAxBE;AAAA,+BA0BiB,gBAAM,IAAN,CAAW;AAC3B;AAD2B,yBAAX,EAEjB,IAFiB,EA1BjB;;AAAA;AA0BC,+BA1BD;;AA6BH,kCAAU,WAAW,EAArB;AACA,4BAAI,IAAJ,GAAW,OAAX;;AA9BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,I;;;;;AAiCtB;;;;;;;;;;iEAOO,kBAAmB,GAAnB,EAAwB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,4BADH,GACU,IAAI,OAAJ,CAAY,IADtB;;AAEH,8BAAM,IAAN;AACM,kCAHH,GAGgB,IAAI,MAAJ,CAAW,OAH3B;;AAIH,4BAAI,CAAC,UAAL,EAAiB;AACb,gCAAI,KAAJ,CAAU,GAAV,EAAe,0BAAf;AACH;;AAEK,uCARH,GAQqB,KAAK,eAR1B;;AASH,4BAAI,CAAC,eAAL,EAAsB;AAClB,gCAAI,KAAJ,CAAU,GAAV,EAAe,kCAAf;AACH;;AAEK,qCAbH,GAamB,KAAK,aAbxB;;AAcH,4BAAI,CAAC,aAAL,EAAoB;AAChB,gCAAI,KAAJ,CAAU,GAAV,EAAe,gCAAf;AACH;;AAEK,4BAlBH,GAkBU,KAAK,IAlBf;;AAmBH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV,EAAe,uBAAf;AACH;;AAEK,iCAvBH,GAuBe,KAAK,SAvBpB;;AAwBH,4BAAI,CAAC,SAAL,EAAgB;AACZ,gCAAI,KAAJ,CAAU,GAAV,EAAe,4BAAf;AACH;;AAEG,+BA5BD,GA4BW,IA5BX;AAAA;AAAA;AAAA,+BA8BiB,kBAAQ,QAAR,CAAiB,UAAjB,CA9BjB;;AAAA;AA8BC,+BA9BD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAgCC,4BAAI,KAAJ,CAAU,GAAV;;AAhCD;AAkCH,4BAAI,CAAC,OAAL,EAAc;AACV,gCAAI,KAAJ,CAAU,GAAV,EAAe,wBAAf;AACH;;AApCE;AAAA,+BAsCc,KAAK,OAAL,CAAa,GAAb,CAtCd;;AAAA;AAsCC,4BAtCD;;AAuCH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV;AACH;AACD,4BAAI,KAAK,IAAL,IAAa,CAAjB,EAAoB;AAChB,gCAAI,CAAC,QAAQ,QAAR,CAAiB,KAAK,EAAtB,CAAL,EAAgC;AAC5B,oCAAI,KAAJ,CAAU,GAAV,EAAe,eAAf;AACH;AACJ;;AAEG,+BAhDD,GAgDW,IAhDX;AAAA;AAAA;AAAA,+BAkDiB,gBAAM,OAAN,CAAc;AAC1B,kDAD0B;AAE1B,4DAF0B;AAG1B;AAH0B,yBAAd,CAlDjB;;AAAA;AAkDC,+BAlDD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwDC,4BAAI,KAAJ,CAAU,GAAV;;AAxDD;AA0DH,4BAAI,OAAJ,EAAa;AACT,gCAAI,KAAJ,CAAU,GAAV,EAAc,kBAAd;AACH;;AAEG,oCA9DD,GA8DgB;AACf,kDADe;AAEf,4DAFe;AAGf,wDAHe;AAIf,sCAJe;AAKf;AALe,yBA9DhB;AAqEG,6BArEH,GAqEW,oBAAU,YAAV,CArEX;AAAA;AAAA;AAAA,+BAuEO,MAAM,IAAN,EAvEP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAyEC,4BAAI,KAAJ,CAAU,GAAV;;AAzED;AA4EG,gCA5EH,GA4Ec,MAAM,MAAN,EA5Ed;;AA6EH,4BAAI,MAAJ,GAAa,GAAb;AACA,4BAAI,IAAJ,GAAW,QAAX;;AA9EG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;AAjLtB;;;;AACA;;;;AACA;;IAAY,I;;AACZ;;;;AACA;;;;;;;;AACA,IAAM,QAAQ,oBAAU,kBAAI,IAAd,CAAd,C,CATA","file":"controllers/patch.js","sourcesContent":["/**\n * Created by Bell on 16/8/25.\n */\n\nimport Project from '../models/project';\nimport Patch from '../models/patch';\nimport * as auth from '../tools/auth';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nexport async function detail(ctx, next) {\n    const patch_id = ctx.params.id;\n    if (!patch_id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let patch = null;\n    try {\n        patch = await Patch.findById(patch_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!patch) {\n        ctx.throw(404, 'patch is not existed');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(patch.project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    const response = patch.toJSON();\n    ctx.body = response;\n}\n\nexport async function del(ctx, next) {\n    const patch_id = ctx.params.id;\n    if (!patch_id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let patch = null;\n    try {\n        patch = await Patch.findById(patch_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!patch) {\n        ctx.throw(404, 'patch is not existed');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(patch.project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    try {\n        await patch.remove();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    ctx.status = 204;\n}\n\nexport async function check(ctx, next) {\n    debug(ctx.request.body);\n\n    const project_id = ctx.request.body.project_id;\n    if (!project_id) {\n        ctx.throw(400, 'project_id can not be empty');\n    }\n\n    const project_version = ctx.request.body.project_version;\n    if (!project_version) {\n        ctx.throw(400, 'project_version can not be empty');\n    }\n\n    const patch_version = ctx.request.body.patch_version | 0;\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let patches = null;\n    try {\n        patches = await Patch.find({\n            project_id: project.id,\n            project_version,\n            patch_version: {$gt: patch_version}\n        }).sort({\n            patch_version: -1\n        }).limit(1);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (patches && patches.length > 0) {\n        const response = patches[0].toJSON();\n        ctx.body = response;\n    } else {\n        ctx.status = 204;\n    }\n}\n\nexport async function list(ctx, next) {\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    let patches = await Patch.find({\n        project_id\n    }).lean();\n    patches = patches || [];\n    ctx.body = patches;\n}\n\n/**\n * add patch to project\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function add(ctx, next) {\n    const body = ctx.request.body;\n    debug(body);\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    const project_version = body.project_version;\n    if (!project_version) {\n        ctx.throw(400, 'project_version can not be empty');\n    }\n\n    const patch_version = body.patch_version;\n    if (!patch_version) {\n        ctx.throw(400, 'patch_version can not be empty');\n    }\n\n    const hash = body.hash;\n    if (!hash) {\n        ctx.throw(400, 'hash can not be empty');\n    }\n\n    const patch_url = body.patch_url;\n    if (!patch_url) {\n        ctx.throw(400, 'patch_url can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500, err);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    let existed = true;\n    try {\n        existed = await Patch.findOne({\n            project_id,\n            project_version,\n            patch_version\n        });\n    } catch (err) {\n        ctx.throw(500,err);\n    }\n    if (existed) {\n        ctx.throw(422,'patch is existed');\n    }\n\n    let patch_object = {\n        project_id,\n        project_version,\n        patch_version,\n        hash,\n        patch_url\n    };\n    const patch = new Patch(patch_object);\n    try {\n        await patch.save();\n    } catch (err) {\n        ctx.throw(500, err);\n    }\n\n    const response = patch.toJSON();\n    ctx.status = 201;\n    ctx.body = response;\n}\n"],"sourceRoot":"/source/"}