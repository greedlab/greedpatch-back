{"version":3,"sources":["controllers/patch.js"],"names":[],"mappings":"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","file":"controllers/patch.js","sourcesContent":["/**\n * Created by Bell on 16/8/25.\n */\n\nimport Project from '../models/project';\nimport Patch from '../models/patch';\nimport * as response_util from '../utils/response';\nimport * as auth from '../tools/auth';\nimport * as check from '../tools/check';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nexport async function detail(ctx, next) {\n    const patch_id = ctx.params.id;\n    if (!check.checkPatchEmpty(ctx, 'patch_id', patch_id)) {\n        return;\n    }\n\n    let patch = null;\n    try {\n        patch = await Patch.findById(patch_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!check.checkPatchResourceEmpty(ctx, patch)) {\n        return;\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(patch.project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!check.checkProjectResourceEmpty(ctx, project)) {\n        return;\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    const response = patch.toJSON();\n    ctx.body = response;\n}\n\nexport async function del(ctx, next) {\n    const patch_id = ctx.params.id;\n    if (!patch_id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let patch = null;\n    try {\n        patch = await Patch.findById(patch_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!check.checkPatchResourceEmpty(ctx, patch)) {\n        return;\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(patch.project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (project.status != 0) {\n        project = null;\n    }\n    if (!check.checkProjectResourceEmpty(ctx, project)) {\n        return;\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    try {\n        await patch.remove();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    ctx.status = 204;\n}\n\nexport async function checkPatch(ctx, next) {\n    debug(ctx.request.body);\n\n    const project_id = ctx.request.body.project_id;\n    if (!check.checkPatchEmpty(ctx, 'project_id', project_id)) {\n        return;\n    }\n\n    const project_version = ctx.request.body.project_version;\n    if (!check.checkPatchEmpty(ctx, 'project_version', project_version)) {\n        return;\n    }\n\n    const patch_version = ctx.request.body.patch_version | 0;\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!check.checkProjectResourceEmpty(ctx, project)) {\n        return;\n    }\n\n    let patches = null;\n    try {\n        patches = await Patch.find({\n            project_id: project.id,\n            project_version,\n            patch_version: {$gt: patch_version}\n        }).sort({\n            patch_version: -1\n        }).limit(1);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (patches && patches.length > 0) {\n        const response = patches[0].toJSON();\n        ctx.body = response;\n    } else {\n        ctx.status = 204;\n    }\n}\n\nexport async function list(ctx, next) {\n    const project_id = ctx.params.project;\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!check.checkProjectResourceEmpty(ctx, project)) {\n        return;\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    let patches = await Patch.find({\n        project_id\n    }).sort({_id: -1}).lean();\n    patches = patches || [];\n    ctx.body = patches;\n}\n\n/**\n * add patch to project\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function create(ctx, next) {\n    const body = ctx.request.body;\n    debug(body);\n    const project_id = ctx.params.project;\n    if (!check.checkPatchEmpty(ctx, 'project_id', project_id)) {\n        return;\n    }\n\n    const project_version = body.project_version;\n    if (!check.checkPatchEmpty(ctx, 'project_version', project_version)) {\n        return;\n    }\n\n    const hash = body.hash;\n    if (!check.checkPatchEmpty(ctx, 'hash', hash)) {\n        return;\n    }\n\n    const patch_url = body.patch_url;\n    if (!check.checkPatchEmpty(ctx, 'patch_url', patch_url)) {\n        return;\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500, err);\n    }\n\n    if (project.status != 0) {\n        project = null;\n    }\n    if (!check.checkProjectResourceEmpty(ctx, project)) {\n        return;\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    let existed = true;\n    try {\n        existed = await Patch.findOne({\n            project_id,\n            project_version,\n            patch_version\n        });\n    } catch (err) {\n        ctx.throw(500, err);\n    }\n    if (existed) {\n        response_util.patchExisted(ctx);\n        return;\n    }\n\n    // get max patch_version\n    let patch_version_objects = null;\n    try {\n        patch_version_objects = await Patch.find({\n            project_id,\n            project_version\n        }, {patch_version: 1}).sort({patch_version: -1}).limit(1);\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    debug(patch_version_objects);\n    let patch_version = 1;\n    if (patch_version_objects && patch_version_objects.length > 0) {\n        patch_version = Number(patch_version_objects[0].patch_version) + 1;\n    }\n\n    const patch_object = {\n        project_id,\n        project_version,\n        patch_version,\n        hash,\n        patch_url\n    };\n    const patch = new Patch(patch_object);\n    try {\n        await patch.save();\n    } catch (err) {\n        ctx.throw(500, err);\n    }\n\n    const response = patch.toJSON();\n    ctx.status = 201;\n    ctx.body = response;\n}\n\n/**\n * list all project versions in project\n *\n * @param ctx\n * @param next\n */\nexport async function listProjectVersions(ctx, next) {\n    const project_id = ctx.params.project;\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!check.checkProjectResourceEmpty(ctx, project)) {\n        return;\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403);\n        }\n    }\n\n    const version_objects = await Patch.aggregate([\n        {$match: {project_id: project_id}},\n        {\n            $group: {\n                _id: \"$project_version\",\n                patch_version: {$max: \"$patch_version\"}\n            }\n        },\n        {$sort: {project_version: 1}}\n    ]);\n    debug(version_objects);\n\n    let data = {\n        id: project_id,\n        versions: version_objects\n    };\n\n    try {\n        const project = await Project.findById(project_id);\n        if (project) {\n            data.project_name = project.name;\n        }\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    ctx.body = data;\n}\n"],"sourceRoot":"/source/"}