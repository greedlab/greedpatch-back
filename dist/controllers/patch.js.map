{"version":3,"sources":["controllers/patch.js"],"names":[],"mappings":"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","file":"controllers/patch.js","sourcesContent":["/**\n * Created by Bell on 16/8/25.\n */\n\nimport Project from '../models/project';\nimport Patch from '../models/patch';\nimport * as auth from '../tools/auth';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nexport async function detail(ctx, next) {\n    debug(ctx.request.body);\n    const patch_id = ctx.params.id;\n    if (!patch_id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let patch = null;\n    try {\n        patch = await Patch.findById(patch_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!patch) {\n        ctx.throw(404, 'patch is not existed');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(patch.project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    const response = patch.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function del(ctx, next) {\n    debug(ctx.request.body);\n    const patch_id = ctx.params.id;\n    if (!patch_id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let patch = null;\n    try {\n        patch = await Patch.findById(patch_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!patch) {\n        ctx.throw(404, 'patch is not existed');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(patch.project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    try {\n        await patch.remove();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function check(ctx, next) {\n    debug(ctx.request.body);\n\n    const bundle_id = ctx.request.body.bundle_id;\n    if (!bundle_id) {\n        ctx.throw(400, 'bundle_id can not be empty');\n    }\n\n    const client = ctx.request.body.client;\n    if (!client) {\n        ctx.throw(400, 'client can not be empty');\n    }\n\n    const project_version = ctx.request.body.app_version;\n    if (!project_version) {\n        ctx.throw(400, 'app_version can not be empty');\n    }\n\n    const patch_version = ctx.request.body.patch_version | 0;\n\n    let project = null;\n    try {\n        project = await Project.findOne({bundle_id});\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let patches = null;\n    try {\n        patches = await Patch.find({\n            project_id: project.id,\n            project_version,\n            patch_version: {$gt: patch_version}\n        }).sort({\n            patch_version: -1\n        }).limit(1);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!patches || patches.length == 0) {\n        ctx.status = 204;\n    }\n\n    const response = patches[0].toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function list(ctx, next) {\n    debug(ctx.request.body);\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    const patches = await Patch.find({\n        project_id\n    });\n    const response = patches.toJSON();\n    ctx.body = {\n        patches: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\nexport async function add(ctx, next) {\n    debug(ctx.request.body);\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    const patch = new Patch(ctx.request.body);\n    try {\n        await patch.save();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    const response = patch.toJSON();\n    ctx.status = 201;\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n"],"sourceRoot":"/source/"}