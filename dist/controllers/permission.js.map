{"version":3,"sources":["controllers/permission.js"],"names":[],"mappings":";;;;;;;;;AASA;;;;;;;;gEAOO,iBAAmB,GAAnB,EAAwB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,4BADH,GACU,IAAI,MAAJ,CAAW,IADrB;AAEC,kCAFD,GAEc,IAFd;AAAA;AAAA;AAAA,+BAIoB,qBAAW,IAAX,CAAgB,EAAC,UAAD,EAAhB,EAAuB,EAAC,KAAI,CAAL,EAAQ,KAAI,CAAZ,EAAvB,EAAuC,KAAvC,CAA6C,CAA7C,CAJpB;;AAAA;AAIC,kCAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAMC,4BAAI,KAAJ,CAAU,GAAV;;AAND;AAQC,gCARD,GAQY,IARZ;;AASH,4BAAI,cAAc,WAAW,MAAX,GAAoB,CAAtC,EAAyC;AACrC,uCAAW,WAAW,CAAX,EAAc,MAAd,EAAX;AACH,yBAFD,MAEO;AACH,uCAAW;AACP,0CADO;AAEP,4CAAY,CAFL;AAGP,yCAAS;AAHF,6BAAX;AAKH;;AAED;AACA,4BAAI,IAAJ,GAAW,QAAX;;AApBG,6BAqBC,IArBD;AAAA;AAAA;AAAA;;AAAA,yDAsBQ,MAtBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;AA0BtB;;;;;;;;;;iEAOO,kBAAmB,GAAnB,EAAwB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,8BAAM,IAAI,OAAJ,CAAY,IAAlB;AACM,4BAFH,GAEU,IAAI,MAAJ,CAAW,IAFrB;;AAGH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV,EAAe,uBAAf;AACH;;AAEG,yCAPD,GAOqB,IAAI,OAAJ,CAAY,IAPjC;;AAQH,0CAAkB,IAAlB,GAAyB,IAAzB;;AARG;AAAA;AAAA,+BAW2B,qBAAW,IAAX,CAAgB,EAAC,UAAD,EAAhB,EAAwB,KAAxB,CAA8B,CAA9B,CAX3B;;AAAA;AAWO,mCAXP;AAYK,kCAZL,GAYmB,eAAe,YAAY,MAAZ,GAAqB,CAArC,GAA0C,YAAY,CAAZ,CAA1C,GAA2D,IAZ7E;;AAAA,6BAaK,UAbL;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAcW,WAAW,MAAX,CAAkB,EAAC,MAAK,iBAAN,EAAlB,CAdX;;AAAA;AAAA;AAAA;;AAAA;AAgBK,qCAAa,yBAAe,iBAAf,CAAb;AAhBL;AAAA,+BAiBW,WAAW,IAAX,EAjBX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAoBC,4BAAI,KAAJ,CAAU,GAAV,EAAc,aAAI,OAAlB;;AApBD;;AAuBH;AACA,4BAAI,MAAJ,GAAa,GAAb;;AAxBG,6BAyBC,IAzBD;AAAA;AAAA;AAAA;;AAAA,0DA0BQ,MA1BR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;AA7CtB;;;;AACA;;;;AACA;;;;;;AACA,IAAM,QAAQ,oBAAU,kBAAI,IAAd,CAAd,C,CAPA","file":"controllers/permission.js","sourcesContent":["/**\n * Created by Bell on 16/8/25.\n */\n\nimport Permission from '../models/permission';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\n/**\n * get permission by type\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function get(ctx, next) {\n    const type = ctx.params.type;\n    let permission = null;\n    try {\n        permission = await Permission.find({type},{_id:0, __v:0}).limit(1);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    let response = null;\n    if (permission && permission.length > 0) {\n        response = permission[0].toJSON();\n    } else {\n        response = {\n            type,\n            permission: 0,\n            domains: []\n        };\n    }\n\n    // response\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * set permission for type\n * \n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function set(ctx, next) {\n    debug(ctx.request.body);\n    const type = ctx.params.type;\n    if (!type) {\n        ctx.throw(400, 'type can not be empty');\n    }\n\n    let permission_object = ctx.request.body;\n    permission_object.type = type;\n\n    try {\n        const permissions = await Permission.find({type}).limit(1);\n        let permission = (permissions && permissions.length > 0) ? permissions[0] : null;\n        if (permission) {\n            await permission.update({$set:permission_object});\n        } else {\n            permission = new Permission(permission_object);\n            await permission.save();\n        }\n    } catch (err) {\n        ctx.throw(500,err.message);\n    }\n\n    // response\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n"],"sourceRoot":"/source/"}