{"version":3,"sources":["controllers/permission.js"],"names":[],"mappings":";;;;;;;;;;gEASO,iBAAmB,GAAnB,EAAwB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,8BAAM,IAAI,OAAJ,CAAY,IAAlB;AACM,0BAFH,GAEQ,IAAI,MAAJ,CAAW,EAFnB;;AAGH,4BAAI,CAAC,EAAL,EAAS;AACL,gCAAI,KAAJ,CAAU,GAAV,EAAe,qBAAf;AACH;;AAEG,kCAPD,GAOc,IAPd;AAAA;AAAA;AAAA,+BASoB,qBAAW,QAAX,CAAoB,EAApB,CATpB;;AAAA;AASC,kCATD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAWC,4BAAI,KAAJ,CAAU,GAAV;;AAXD;AAaH,4BAAI,CAAC,UAAL,EAAiB;AACb,yCAAa,yBAAe;AACxB,sCADwB;AAExB,4CAAY,CAFY;AAGxB,yCAAS;AAHe,6BAAf,CAAb;AAKH;;AAED;AACM,gCAtBH,GAsBc,WAAW,MAAX,EAtBd;;AAuBH,4BAAI,IAAJ,GAAW,QAAX;;AAvBG,6BAwBC,IAxBD;AAAA;AAAA;AAAA;;AAAA,yDAyBQ,MAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;;iEA6Bf,kBAAmB,GAAnB,EAAwB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,8BAAM,IAAI,OAAJ,CAAY,IAAlB;AACM,0BAFH,GAEQ,IAAI,MAAJ,CAAW,EAFnB;;AAGH,4BAAI,CAAC,EAAL,EAAS;AACL,gCAAI,KAAJ,CAAU,GAAV,EAAe,qBAAf;AACH;;AAEG,kCAPD,GAOc,IAPd;AAAA;AAAA;AAAA,+BASoB,qBAAW,QAAX,CAAoB,EAApB,CATpB;;AAAA;AASC,kCATD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAWC,4BAAI,KAAJ,CAAU,GAAV;;AAXD;AAAA,4BAaE,UAbF;AAAA;AAAA;AAAA;;AAcC,qCAAa,yBAAe,IAAI,OAAJ,CAAY,IAA3B,CAAb;AACA,mCAAW,EAAX,GAAgB,EAAhB;AAfD;AAAA;AAAA,+BAiBW,WAAW,IAAX,EAjBX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmBK,4BAAI,KAAJ,CAAU,GAAV;;AAnBL;AAAA;AAAA;;AAAA;AAsBC,mCAAW,MAAX,CAAkB,IAAI,OAAJ,CAAY,IAA9B;;AAtBD;;AAyBH;AACA,4BAAI,MAAJ,GAAa,GAAb;;AA1BG,6BA2BC,IA3BD;AAAA;AAAA;AAAA;;AAAA,0DA4BQ,MA5BR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;AAlCtB;;;;AACA;;;;AACA;;;;;;AACA,IAAM,QAAQ,oBAAU,kBAAI,IAAd,CAAd,C,CAPA","file":"controllers/permission.js","sourcesContent":["/**\n * Created by Bell on 16/8/25.\n */\n\nimport Permission from '../models/permission';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nexport async function get(ctx, next) {\n    debug(ctx.request.body);\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let permission = null;\n    try {\n        permission = await Permission.findById(id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!permission) {\n        permission = new Permission({\n            id,\n            permission: 0,\n            domains: []\n        });\n    }\n\n    // response\n    const response = permission.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function set(ctx, next) {\n    debug(ctx.request.body);\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let permission = null;\n    try {\n        permission = await Permission.findById(id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!permission) {\n        permission = new Permission(ctx.request.body);\n        permission.id = id;\n        try {\n            await permission.save();\n        } catch (err) {\n            ctx.throw(500);\n        }\n    } else {\n        permission.update(ctx.request.body);\n    }\n\n    // response\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n"],"sourceRoot":"/source/"}