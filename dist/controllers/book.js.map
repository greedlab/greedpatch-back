{"version":3,"sources":["controllers/book.js"],"names":[],"mappings":";;;;;;;;;AAUA;;;;;;;;;;gEASO,iBAAwB,GAAxB,EAA6B,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEqB,eAAK,IAAL,EAFrB;;AAAA;AAEO,6BAFP;;AAGC,4BAAI,CAAC,KAAL,EAAY;AACR,gCAAI,KAAJ,CAAU,GAAV;AACH;AACD,4BAAI,IAAJ,GAAW;AACP;AADO,yBAAX;AAND;AAAA;;AAAA;AAAA;AAAA;;AAUC,4BAAI,gBAAQ,GAAR,IAAe,YAAI,IAAJ,KAAa,WAAhC,EAA6C;AACzC,gCAAI,KAAJ,CAAU,GAAV;AACH;AACD,4BAAI,KAAJ,CAAU,GAAV;;AAbD;AAAA,6BAeA,IAfA;AAAA;AAAA;AAAA;;AAAA,yDAgBQ,MAhBR;;AAAA;AAiBF;;AAjBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,Q;;;;;AAoBtB;;;;;;;;;;;;iEASO,kBAAuB,GAAvB,EAA4B,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,8BAAM,IAAI,OAAJ,CAAY,IAAlB;AACM,4BAFH,GAEU,mBAAS,IAAI,OAAJ,CAAY,IAArB,CAFV;AAAA;AAAA;AAAA,+BAIO,KAAK,IAAL,EAJP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAMC,4BAAI,KAAJ,CAAU,GAAV,EAAe,aAAI,OAAnB;;AAND;AAQG,gCARH,GAQc,KAAK,MAAL,EARd;;AASH,4BAAI,IAAJ,GAAW,QAAX;;AATG,6BAUC,IAVD;AAAA;AAAA;AAAA;;AAAA,0DAWQ,MAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,O;;;;;AAetB;;;;;;;;;;;;iEASO,kBAAwB,GAAxB,EAA6B,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEoB,eAAK,QAAL,CAAc,IAAI,OAAJ,CAAY,KAAZ,CAAkB,EAAhC,CAFpB;;AAAA;AAEO,4BAFP;;AAGC,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV;AACH;AACD,4BAAI,IAAJ,GAAW;AACP;AADO,yBAAX;AAND;AAAA;;AAAA;AAAA;AAAA;;AAUC,4BAAI,iBAAQ,GAAR,IAAe,aAAI,IAAJ,KAAa,WAAhC,EAA6C;AACzC,gCAAI,KAAJ,CAAU,GAAV;AACH;AACD,4BAAI,KAAJ,CAAU,GAAV;;AAbD;AAAA,6BAeA,IAfA;AAAA;AAAA;AAAA;;AAAA,0DAgBQ,MAhBR;;AAAA;AAiBF;;AAjBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,Q;;;;;AAoBtB;;;;;;;;;;iEAOO,kBAA0B,GAA1B,EAA+B,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,4BAFP,GAEc,mBAAS,IAAI,OAAJ,CAAY,IAArB,CAFd;AAAA;AAAA,+BAGO,KAAK,MAAL,EAHP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKC,4BAAI,KAAJ,CAAU,GAAV;;AALD;AAOH,4BAAI,MAAJ,GAAa,GAAb;AACA,4BAAI,IAAJ,GAAW;AACP,qCAAS;AADF,yBAAX;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,U;;;;;AA/FtB;;;;AAEA;;;;AACA;;;;;;AACA,IAAM,QAAQ,oBAAU,kBAAI,IAAd,CAAd,C,CARA","file":"controllers/book.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport Book from '../models/book';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\n/**\n * list books\n *\n * @example curl -X GET localhost:4002/book/list\n *\n * @param ctx\n * @param next\n * @returns {books:[{name: \"book\", price: \"$100\"}]}\n */\nexport async function listBook(ctx, next) {\n    try {\n        const books = await Book.find();\n        if (!books) {\n            ctx.throw(404);\n        }\n        ctx.body = {\n            books\n        };\n    } catch (err) {\n        if (err === 404 || err.name === 'CastError') {\n            ctx.throw(404);\n        }\n        ctx.throw(500);\n    }\n    if(next) {\n        return next();\n    };\n}\n\n/**\n * add book\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d 'name=book name&price=$100'  localhost:4002/book/add\n * @param ctx\n *\n * @param next\n * @returns {id: \"XXXXXX\", name: \"book\", price: \"$100\"}\n */\nexport async function addBook(ctx, next) {\n    debug(ctx.request.body);\n    const book = new Book(ctx.request.body);\n    try {\n        await book.save();\n    } catch (err) {\n        ctx.throw(422, err.message);\n    }\n    const response = book.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * show book detail\n *\n * @example curl -X GET localhost:4002/book/detail?id=57ac63281bc525c5243715c6\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function showBook(ctx, next) {\n    try {\n        const book = await Book.findById(ctx.request.query.id);\n        if (!book) {\n            ctx.throw(404);\n        }\n        ctx.body = {\n            book\n        };\n    } catch (err) {\n        if (err === 404 || err.name === 'CastError') {\n            ctx.throw(404);\n        }\n        ctx.throw(500);\n    }\n    if(next) {\n        return next();\n    };\n}\n\n/**\n * delete book\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d 'id=57ac63281bc525c5243715c6'  localhost:4002/book/delete\n * @param ctx\n * @param next\n */\nexport async function deleteBook(ctx, next) {\n    try {\n        const book = new Book(ctx.request.body);\n        await book.remove();\n    } catch (err) {\n        ctx.throw(500);\n    }\n    ctx.status = 200;\n    ctx.body = {\n        success: true\n    };\n}\n"],"sourceRoot":"/source/"}