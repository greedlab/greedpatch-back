{"version":3,"sources":["controllers/project.js"],"names":[],"mappings":"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","file":"controllers/project.js","sourcesContent":["/**\n * Created by Bell on 16/8/25.\n */\n\nimport Project from '../models/project';\nimport User from '../models/user';\nimport * as auth from '../tools/auth';\nimport * as check from '../tools/check';\nimport * as response_util from '../utils/response';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\n/**\n * add project\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function create(ctx, next) {\n    const name = ctx.request.body.name;\n    if (!check.checkProjectEmpty(ctx, 'name', name)) {\n        return;\n    }\n\n    let user = null;\n    try {\n        user = await auth.getUser(ctx);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    let project_object = ctx.request.body;\n    project_object.members = [\n        {\n            id: user.id,\n            email: user.email,\n            role: 1\n        }\n    ];\n    const project = new Project(project_object);\n    try {\n        await project.save();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // response\n    const response = project.toJSON();\n    ctx.status = 201;\n    ctx.body = response;\n}\n\n/**\n * get project detail\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function detail(ctx, next) {\n    const id = ctx.params.id;\n    let project = null;\n    try {\n        project = await Project.findById(id);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!project) {\n        response_util.projectNotExist(ctx);\n        return;\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.role != 1) { // not manager\n        if (!project.isMember(user.id)) {\n            ctx.throw(403);\n        }\n    }\n\n    // response\n    const response = project.toJSON();\n    ctx.body = response;\n}\n\n/**\n * delete project\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function del(ctx, next) {\n    const id = ctx.params.id;\n\n    let project = null;\n    try {\n        project = await Project.findById(id);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!check.checkProjectResourceEmpty(ctx, project)) {\n        return;\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.role != 1) { // not manager\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    try {\n        await project.remove();\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // response\n    ctx.status = 204;\n}\n\n/**\n * update project\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function update(ctx, next) {\n    const id = ctx.params.id;\n\n    let project = null;\n    try {\n        project = await Project.findById(id);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!check.checkProjectResourceEmpty(ctx, project)) {\n        return;\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403);\n        }\n    }\n\n    let object = {};\n    const name = ctx.request.body.name;\n    if (name) {\n        object.name = name;\n    }\n    const introduction = ctx.request.body.introduction;\n    if (introduction) {\n        object.introduction = introduction;\n    }\n    try {\n        await project.update(object);\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // response\n    ctx.status = 204;\n}\n\n/**\n * list all projects\n *\n * @param ctx\n * @param next\n */\nexport async function listAll(ctx, next) {\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.role != 1) {\n        ctx.throw(403);\n    }\n\n    let projects = null;\n    try {\n        projects = await Project.find().lean();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // response\n    ctx.body = projects || [];\n}\n\n/**\n * list my projects\n *\n * @param ctx\n * @param next\n */\nexport async function listMy(ctx, next) {\n    const userid = auth.getID(ctx);\n\n    if (!userid) {\n        ctx.throw(401);\n    }\n\n    let projects = null;\n    try {\n        projects = await Project.find({'members.id': userid}).lean();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // response\n    ctx.body = projects || [];\n}\n\n/**\n * add member to project\n *\n * @param ctx\n * @param next\n */\nexport async function addMember(ctx, next) {\n    debug(ctx.request.body);\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    const email = ctx.request.body.email;\n    if (!email) {\n        ctx.throw(400, 'email can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    let add_user = null;\n    try {\n        add_user = await User.findOne({email});\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!add_user) {\n        ctx.throw(422, 'user is not existed');\n    }\n\n    if (project.isMember(add_user.id)) {\n        ctx.throw(422, 'user is in the project');\n    }\n\n    let members = project.members || [];\n    members.push({\n        id: add_user.id,\n        email: add_user.email,\n        role: 0\n    });\n    try {\n        await project.update({$set: {members}});\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    // response\n    ctx.status = 204;\n}\n\n/**\n * list all members in project\n *\n * @param ctx\n * @param next\n */\nexport async function listMembers(ctx, next) {\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    // response\n    const response = project.members || [];\n    ctx.body = {\n        members: response\n    };\n}\n\n/**\n * delete member in project\n *\n * @param ctx\n * @param next\n */\nexport async function delMember(ctx, next) {\n    debug(ctx.request.body);\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    const member_id = ctx.params.member;\n    if (!project_id) {\n        ctx.throw(400, 'member can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    if (project.isManager(member_id)) {\n        ctx.throw(403, 'can not delete manager');\n    }\n\n    const index = project.indexOf(member_id);\n    if (index == -1) {\n        ctx.throw(422, 'member is not in the project');\n    }\n\n    let members = project.members;\n    members.splice(index, 1);\n\n    try {\n        await project.update({$set: {members}});\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    ctx.status = 204;\n}\n"],"sourceRoot":"/source/"}