{"version":3,"sources":["controllers/project.js"],"names":[],"mappings":"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","file":"controllers/project.js","sourcesContent":["/**\n * Created by Bell on 16/8/25.\n */\n\nimport Project from '../models/project';\nimport User from '../models/user';\nimport * as auth from '../tools/auth';\nimport * as encrypt from '../utils/encrypt';\nimport * as array_util from '../utils/array';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nexport async function add(ctx, next) {\n    debug(ctx.request.body);\n    const bundle_id = ctx.request.body.bundle_id;\n    if (!bundle_id) {\n        ctx.throw(400, 'bundle_id can not be empty');\n    }\n\n    const name = ctx.request.body.name;\n    if (!name) {\n        ctx.throw(400, 'name can not be empty');\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    const project = new Project(ctx.request.body);\n    project.members = [\n        {\n            id: user.id,\n            email: user.email,\n            role: 0\n        }\n    ];\n    await project.save();\n\n    // response\n    const response = project.toJSON();\n    ctx.status = 201;\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function detail(ctx, next) {\n    debug(ctx.request.body);\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'unvalid id');\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.role != 1) { // not manager\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    // response\n    const response = project.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function del(ctx, next) {\n    debug(ctx.request.body);\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'unvalid id');\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.role != 1) { // not manager\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    try {\n        await project.remove();\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // response\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function update(ctx, next) {\n    debug(ctx.request.body);\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'unvalid id');\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    let object = {};\n    const name = ctx.request.body.name;\n    if (name) {\n        object.name = name;\n    }\n    const introduction = ctx.request.body.introduction;\n    if (introduction) {\n        object.introduction = introduction;\n    }\n    try {\n        await project.update(object);\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    // response\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function listAll(ctx, next) {\n    debug(ctx.request.body);\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.role != 1) {\n        ctx.throw(403, 'no permission');\n    }\n\n    let projects = null;\n    try {\n        projects = await Project.find();\n    } catch (err) {\n        ctx.throw(500);\n    }\n    projects = projects | [];\n\n    // response\n    const response = projects.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function listMy(ctx, next) {\n    debug(ctx.request.body);\n\n    const userid = auth.getID();\n\n    if (!userid) {\n        ctx.throw(401);\n    }\n\n    let projects = null;\n    try {\n        projects = await Project.find({'members.id': userid});\n    } catch (err) {\n        ctx.throw(500);\n    }\n    projects = projects | [];\n\n    // response\n    const response = projects.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function addMember(ctx, next) {\n    debug(ctx.request.body);\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    const email = ctx.request.body.email;\n    if (!email) {\n        ctx.throw(400, 'email can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    const user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    let add_user = null;\n    try {\n        add_user = await User.find({email});\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!add_user) {\n        ctx.throw(422, 'user is not existed');\n    }\n\n    if (project.isMember(add_user.id)) {\n        ctx.throw(422, 'user is in the project');\n    }\n\n    let members = project.members | [];\n    members.push({\n        id: add_user.id,\n        email: add_user.email,\n        role: 0\n    });\n    try {\n        await project.update(members);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    // response\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function listMembers(ctx, next) {\n    debug(ctx.request.body);\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isMember(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    let members = project.members | [];\n    try {\n        await project.update(members);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    // response\n    const response = project.members.toJSON();\n    ctx.body = {\n        members: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\nexport async function delMember(ctx, next) {\n    debug(ctx.request.body);\n    const project_id = ctx.params.project;\n    if (!project_id) {\n        ctx.throw(400, 'project can not be empty');\n    }\n\n    const member_id = ctx.params.member;\n    if (!project_id) {\n        ctx.throw(400, 'member can not be empty');\n    }\n\n    let project = null;\n    try {\n        project = await Project.findById(project_id);\n    } catch (err) {\n        ctx.throw(500);\n    }\n    if (!project) {\n        ctx.throw(422, 'project is not existed');\n    }\n\n    let user = await auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        if (!project.isManager(user.id)) {\n            ctx.throw(403, 'no permission');\n        }\n    }\n\n    const index = project.indexOf(member_id);\n    if (index == -1) {\n        ctx.throw(422, 'member is not in the project');\n    }\n\n    const members = project.members.splice(index, 1);\n    try {\n        await project.update(members);\n    } catch (err) {\n        ctx.throw(500);\n    }\n\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n"],"sourceRoot":"/source/"}