{"version":3,"sources":["controllers/token.js"],"names":[],"mappings":"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","file":"controllers/token.js","sourcesContent":["/**\n * Created by Bell on 16/8/24.\n */\n\nimport Token from '../models/token';\nimport * as auth from '../tools/auth';\nimport * as encrypt from '../utils/encrypt';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\n/**\n * generate new token\n *\n * @example curl -H \"Content-Type: application/json\" -X POST -d '{ \"name\": \"test generate token\" }' localhost:4002/tokens\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function generate(ctx, next) {\n    debug(ctx.request.body);\n    const name = ctx.request.body.name;\n\n    if (!name) {\n        ctx.throw(400, 'name can not be empty');\n    }\n\n    const user = new auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    const token = user.generateCheckPatchToken();\n    if (!token) {\n        ctx.throw(500);\n    }\n\n    const token_object = new Token({token, name, type: 1});\n    await token_object.save();\n\n    // TODO check save response\n\n    // response\n    const response = token_object.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * generate new token\n *\n * @example curl -H \"Content-Type: application/json\" -X GET -d '{ \"status\": 0, \"type\": 1 }' localhost:4002/tokens\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function list(ctx, next) {\n    debug(ctx.request.body);\n    const status = ctx.request.body.status | 0;\n    const type = ctx.request.body.type | 1;\n    const userid = auth.getID(ctx);\n    if (!userid) {\n        ctx.throw(403);\n    }\n    const tokens = await Token.find({userid, status, type});\n    // response\n    const response = tokens.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * get token detail\n *\n * @example curl -H \"Content-Type: application/json\" -X POST localhost:4002/tokens/:id\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function detail(ctx, next) {\n    debug(ctx.request.body);\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n    const password = ctx.params.password;\n    if (!password) {\n        ctx.throw(400, 'password can not be empty');\n    }\n    const userid = auth.getID(ctx);\n    if (!userid) {\n        ctx.throw(403, 'unvalid token');\n    }\n\n    const hashed_password = auth.getPassword(userid);\n    const result = await encrypt.compareHashString(password, hashed_password);\n    if (!result) {\n        ctx.throw(403, 'error password');\n    }\n\n    let token = null;\n    try {\n        token = await Token.findById(id, userid);\n    } catch (err) {\n        ctx.throw(422, 'unvalid id');\n    }\n    if (!token) {\n        ctx.throw(422, 'unvalid id');\n    }\n\n    // response\n    const response = token.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * delete token\n *\n * @example curl -H \"Content-Type: application/json\" -X DELETE localhost:4002/tokens/:id\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function del(ctx, next) {\n    debug(ctx.request.body);\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n    const userid = auth.getID(ctx);\n    if (!userid) {\n        ctx.throw(403);\n    }\n    try {\n        await Token.remove(id, userid);\n    } catch (err) {\n        ctx.throw(422, 'unvalid id');\n    }\n    ctx.status = 204;\n    if (next) {\n        return next();\n    }\n}\n"],"sourceRoot":"/source/"}