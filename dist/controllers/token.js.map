{"version":3,"sources":["controllers/token.js"],"names":[],"mappings":";;;;;;;;;;gEAeO,iBAAwB,GAAxB,EAA6B,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,8BAAM,IAAI,OAAJ,CAAY,IAAlB;AACM,4BAFH,GAEU,IAAI,OAAJ,CAAY,IAAZ,CAAiB,IAF3B;;;AAIH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV,EAAe,wBAAf;AACH;;AAEK,4BARH,GAQU,IAAI,KAAK,OAAT,CAAiB,GAAjB,CARV;;AASH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV;AACH;;AAEK,6BAbH,GAaW,KAAK,uBAAL,EAbX;;AAcH,4BAAI,CAAC,KAAL,EAAY;AACR,gCAAI,KAAJ,CAAU,GAAV;AACH;;AAEK,oCAlBH,GAkBkB,oBAAU,EAAC,YAAD,EAAO,UAAP,EAAY,MAAM,CAAlB,EAAV,CAlBlB;AAAA;AAAA,+BAmBG,aAAa,IAAb,EAnBH;;AAAA;;AAqBH;;AAEA;AACM,gCAxBH,GAwBc,aAAa,MAAb,EAxBd;;AAyBH,4BAAI,IAAJ,GAAW,QAAX;;AAzBG,6BA0BC,IA1BD;AAAA;AAAA;AAAA;;AAAA,yDA2BQ,MA3BR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,Q;;;;;;iEA+Bf,kBAAoB,GAApB,EAAyB,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,I;;;;;;iEAIf,kBAAmB,GAAnB,EAAwB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,G;;;;;AA9CtB;;;;AACA;;;;AACA;;;;AACA;;AACA;;IAAY,K;;AACZ;;IAAY,I;;AACZ;;IAAY,U;;AACZ;;;;AACA;;;;;;;;AACA,IAAM,QAAQ,oBAAU,kBAAI,IAAd,CAAd,C,CAbA","file":"controllers/token.js","sourcesContent":["/**\n * Created by Bell on 16/8/24.\n */\n\nimport passport from 'koa-passport';\nimport User from '../models/user';\nimport Token from '../models/token';\nimport {addToken as addUnvalidToken} from '../utils/unvalid-token';\nimport * as regex from '../utils/regex';\nimport * as auth from '../utils/auth';\nimport * as token_util from '../utils/token';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nexport async function generate(ctx, next) {\n    debug(ctx.request.body);\n    const name = ctx.request.body.name;\n\n    if (!name) {\n        ctx.throw(400, 'name can not bel empty');\n    }\n\n    const user = new auth.getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    const token = user.generateCheckPatchToken();\n    if (!token) {\n        ctx.throw(500);\n    }\n\n    const token_object = new Token({token,name,type: 1});\n    await token_object.save();\n\n    // TODO check save response\n\n    // response\n    const response = token_object.toJSON();\n    ctx.body = response;\n    if (next) {\n        return next();\n    }\n}\n\nexport async function list(ctx, next) {\n\n}\n\nexport async function del(ctx, next) {\n\n}"],"sourceRoot":"/source/"}