{"version":3,"sources":["controllers/token.js"],"names":[],"mappings":"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","file":"controllers/token.js","sourcesContent":["/**\n * Created by Bell on 16/8/24.\n */\n\nimport * as token_util from '../utils/token';\nimport Token from '../models/token';\nimport * as auth from '../tools/auth';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\n/**\n * generate new token\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function generate(ctx, next) {\n    debug(ctx.request.body);\n    const name = ctx.request.body.name;\n\n    if (!name) {\n        ctx.throw(400, 'name can not be empty');\n    }\n\n    const userid = auth.getID(ctx);\n    if (!userid) {\n        ctx.throw(401);\n    }\n\n    const token = token_util.generateCheckPatchToken(userid);\n    if (!token) {\n        ctx.throw(500);\n    }\n\n    const token_object = new Token({userid, token, name, type: 1});\n    try {\n        await token_object.save();\n    } catch (err) {\n        ctx.throw(500, err.message);\n    }\n\n    // response\n    const response = token_object.toJSON();\n    ctx.body = response;\n}\n\n/**\n * generate new token\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function list(ctx, next) {\n    const status = ctx.request.body.status || 0;\n    const type = ctx.request.body.type || 1;\n    const userid = auth.getID(ctx);\n    if (!userid) {\n        ctx.throw(403);\n    }\n    let tokens = await Token.find({userid, status, type}).lean();\n    let array = [];\n    for (let token of tokens) {\n        delete token.token;\n        array.push(token);\n    }\n    ctx.body = array || [];\n}\n\n/**\n * get token detail\n *\n * @example curl -H \"Content-Type: application/json\" -X POST localhost:4002/tokens/:id\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function detail(ctx, next) {\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n    const password = ctx.request.body.password;\n    if (!password) {\n        ctx.throw(400, 'password can not be empty');\n    }\n\n    const user = await auth.getFullUser(ctx);\n    if (!user) {\n        ctx.throw(403, 'unvalid token');\n    }\n\n    const result = await user.validatePassword(password);\n    if (!result) {\n        ctx.throw(403, 'error password');\n    }\n\n    let token = null;\n    try {\n        token = await Token.findById(id);\n    } catch (err) {\n        ctx.throw(422, 'unvalid id');\n    }\n    if (!token) {\n        ctx.throw(422, 'unvalid id');\n    }\n    if (token.userid != user.id) {\n        ctx.throw(403, 'no permission');\n    }\n\n    // response\n    const response = token.toJSON();\n    ctx.body = response;\n}\n\n/**\n * delete token\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function del(ctx, next) {\n    const id = ctx.params.id;\n    if (!id) {\n        ctx.throw(400, 'id can not be empty');\n    }\n    const userid = auth.getID(ctx);\n    if (!userid) {\n        ctx.throw(403);\n    }\n    try {\n        await Token.remove({_id:id, userid});\n    } catch (err) {\n        ctx.throw(422, 'unvalid id');\n    }\n    ctx.status = 204;\n}\n"],"sourceRoot":"/source/"}