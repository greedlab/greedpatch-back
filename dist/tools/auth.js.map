{"version":3,"sources":["tools/auth.js"],"names":[],"mappings":"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","file":"tools/auth.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport User from '../models/user';\nimport config from '../config';\nimport { verify } from 'jsonwebtoken';\nimport { existed as unvalid_token_existed }  from './unvalid-token';\n\n/**\n * ensure user login successfully\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureUser(ctx, next) {\n    const token = getToken(ctx);\n    if (!token) {\n        ctx.throw(401);\n    }\n\n    const existed = await unvalid_token_existed(token);\n    if (existed) {\n        ctx.throw(401);\n    }\n\n    let payload = null;\n    try {\n        payload = verify(token, config.token);\n    } catch (err) {\n        ctx.throw(401);\n    }\n\n    if (payload.exp && payload.exp < Date.now() / 1000) {\n        ctx.throw(401);\n    }\n\n    if (!payload.id) {\n        ctx.throw(401);\n    }\n\n    let user = null;\n    try {\n        user = await User.findById(payload.id, {password: 0, __v: 0});\n    } catch (err) {\n        ctx.throw(401);\n    }\n    if (!user) {\n        ctx.throw(401);\n    }\n\n    if (user.status != 0) {\n        ctx.throw(403, 'user is disable');\n    }\n\n    return next();\n}\n\n/**\n * ensure token can set password\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureSetPasswordToken(ctx, next) {\n    const payload = getPayload(ctx);\n    if (!payload) {\n        ctx.throw(401);\n    }\n    const scope = payload.scope;\n    if (!scope || scope != 'all') {\n        ctx.throw(403);\n    }\n    return next();\n}\n\n/**\n * ensure the user is manager\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureManager(ctx, next) {\n    const user = await getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        ctx.throw(403);\n    }\n    return next();\n}\n\n/**\n * get token from ctx.request header\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @returns {*}\n */\nexport function getToken(ctx) {\n    const header = ctx.request.header.authorization;\n    if (!header) {\n        return null;\n    }\n    const parts = header.split(' ');\n    if (parts.length !== 2) {\n        return null;\n    }\n    const scheme = parts[0];\n    const token = parts[1];\n    if (/^Bearer$/i.test(scheme)) {\n        return token;\n    }\n    return null;\n}\n\n/**\n * get payload from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport function getPayload(ctx) {\n    const token = getToken(ctx);\n    if (token) {\n        return verify(token, config.token);\n    }\n    return null;\n}\n\n/**\n * get user ID from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport function getID(ctx) {\n    const payload = getPayload(ctx);\n    if (payload) {\n        return payload.id;\n    }\n    return null;\n}\n\n/**\n * get User from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport async function getUser(ctx) {\n    const id = getID(ctx);\n    if (id) {\n        return await User.findById(id, {password: 0, __v: 0});\n    }\n    return null;\n}\n\n/**\n * get password from user ID\n * @param userid\n * @returns {*}\n */\nexport async function getPassword(userid) {\n    if (!userid) {\n        return null;\n    }\n    const user = await User.findById(userid);\n    if (!user) {\n        return null;\n    }\n    return user.password;\n}\n"],"sourceRoot":"/source/"}