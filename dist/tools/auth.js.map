{"version":3,"sources":["tools/auth.js"],"names":[],"mappings":"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","file":"tools/auth.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport User from '../models/user';\nimport config from '../config';\nimport * as token_redis from '../redis/token';\nimport * as user_redis from '../redis/user';\nimport * as token_util from '../utils/token';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nconst token_key = 'token';\nconst role_key = 'role';\n\n/**\n * ensure user login successfully\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureUser(ctx, next) {\n    let token = getToken(ctx);\n    return ensureUserWithToken(ctx, next, token);\n}\n\nexport async function ensureUserWithToken(ctx, next, token) {\n    if (!token) {\n        ctx.throw(401);\n    }\n\n    const payload = token_util.getPayload(token);\n    if (!token) {\n        ctx.throw(401);\n    }\n\n    if (payload.exp && payload.exp < Date.now()) {\n        ctx.throw(401);\n    }\n\n    const userid = payload.id;\n    if (!userid) {\n        ctx.throw(401);\n    }\n\n    // whether the iat of token less than valid timestamp\n    const timestamp = await user_redis.getTimestamp(userid);\n    if (timestamp && timestamp > 0) {\n        if (timestamp > payload.iat) {\n            ctx.throw(401);\n        }\n    }\n\n    // whether user is disabled\n    const status = await user_redis.getStatus(userid);\n    if (status && status != 0) {\n        ctx.throw(403, 'user is disabled');\n    }\n\n    // whether the token is in redis\n    const existed = await token_redis.existed(token);\n    if (existed == 0) {\n        ctx.throw(401);\n    }\n\n    return next();\n}\n\n/**\n * ensure token can set password\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureSetPasswordToken(ctx, next) {\n    const payload = getPayload(ctx);\n    if (!payload) {\n        ctx.throw(401);\n    }\n    const scope = payload.scope;\n    if (!scope || scope != 'all') {\n        ctx.throw(403);\n    }\n    return next();\n}\n\n/**\n * ensure the user is manager\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureManager(ctx, next) {\n    const user = await getUser(ctx);\n    if (!user) {\n        ctx.throw(401);\n    }\n    if (user.role != 1) {\n        ctx.throw(403);\n    }\n    return next();\n}\n\n/**\n * get token from ctx.request header\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @returns {*}\n */\nexport function getToken(ctx) {\n    let token = getTokenFromHeader(ctx);\n    if (!token) {\n        token = getTokenFromCookie(ctx);\n    }\n    return token;\n}\n\nexport function getTokenFromHeader(ctx) {\n    const header = ctx.request.header.authorization;\n    if (!header) {\n        return null;\n    }\n    const parts = header.split(' ');\n    if (parts.length !== 2) {\n        return null;\n    }\n    const scheme = parts[0];\n    const token = parts[1];\n    if (/^Bearer$/i.test(scheme)) {\n        return token;\n    }\n    return null;\n}\n\nexport function getTokenFromCookie(ctx) {\n    return ctx.cookies.get(token_key);\n}\n\n/**\n * get payload from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport function getPayload(ctx) {\n    const token = getToken(ctx);\n    if (token) {\n        return token_util.getPayload(token);\n    }\n    return null;\n}\n\n/**\n * get user ID from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport function getID(ctx) {\n    const payload = getPayload(ctx);\n    if (payload) {\n        return payload.id;\n    }\n    return null;\n}\n\n/**\n * get User with password from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport async function getFullUser(ctx) {\n    const id = getID(ctx);\n    if (id) {\n        return await User.findById(id);\n    }\n    return null;\n}\n\n/**\n * get User with out password from ctx.request header\n * @param ctx\n * @returns {*}\n */\nexport async function getUser(ctx) {\n    const id = getID(ctx);\n    if (id) {\n        return await User.findById(id, {password: 0, __v: 0});\n    }\n    return null;\n}\n\n/**\n * get password from user ID\n * @param userid\n * @returns {*}\n */\nexport async function getPassword(userid) {\n    if (!userid) {\n        return null;\n    }\n    const user = await User.findById(userid);\n    if (!user) {\n        return null;\n    }\n    return user.password;\n}\n"],"sourceRoot":"/source/"}